CREATE SCHEMA IF NOT EXISTS TW;
CREATE SCHEMA IF NOT EXISTS GENERAL;

CREATE TABLE GENERAL.PROPERTY(
	PROP_KEY varchar(255),
	PROP_VAL varchar(255),
    PRIMARY KEY(PROP_KEY, PROP_VAL)
);

CREATE TABLE GENERAL.BUILDING(
	BUILDING_ID BIGINT,
	BUILDING_KEY varchar(255),
	EXPRESSION varchar(255),
	PRIMARY KEY(BUILDING_ID)
);

CREATE TABLE GENERAL.BUILDING_PROPERTY(
	BUILDING_ID BIGINT,
	PROP_KEY varchar(255),
	PROP_VAL varchar(255),
	PRIMARY KEY(BUILDING_ID,PROP_KEY, PROP_VAL),
	FOREIGN KEY (BUILDING_ID) REFERENCES GENERAL.BUILDING(BUILDING_ID),
    FOREIGN KEY (PROP_KEY , PROP_VAL) REFERENCES GENERAL.PROPERTY(PROP_KEY , PROP_VAL)
);

CREATE TABLE GENERAL.BUILDING_LVL_PROPERTY(
	BUILDING_ID BIGINT,
    PROP_KEY varchar(255),
	PROP_VAL varchar(255),
	LEVEL INTEGER,
	PRIMARY KEY(BUILDING_ID,PROP_KEY, PROP_VAL, LEVEL),
    FOREIGN KEY (BUILDING_ID) REFERENCES GENERAL.BUILDING(BUILDING_ID),
    FOREIGN KEY (PROP_KEY , PROP_VAL) REFERENCES GENERAL.PROPERTY(PROP_KEY , PROP_VAL)
);

CREATE TABLE GENERAL.BUILDING_POINT_SUM(
	BUILDING_ID BIGINT,
	LEVEL INTEGER,
	SUM INTEGER,
	PRIMARY KEY(BUILDING_ID,LEVEL),
	FOREIGN KEY (BUILDING_ID) REFERENCES GENERAL.BUILDING(BUILDING_ID)
)

CREATE TABLE GENERAL.POINTS_CONFIG(
	POINT_NUM INTEGER,
	IS_STATUE BIT,
	CONFIG	varchar(255),
    PRIMARY KEY(POINT_NUM, CONFIG)
);

CREATE TABLE GENERAL.BONUS(
	BONUS_ID BIGINT,
	BONUS_KEY varchar(255),
	DESCRIPTION varchar(255),
	ASSET_NAME varchar(255),
	PRIMARY KEY (BONUS_ID)
);


CREATE TABLE TW.MAPASSET(
	MAPASSET_ID BIGINT,
    NAME VARCHAR (30),
    ISOBSTACLE BIT,
    PRIMARY KEY (MAPASSET_ID)
);

CREATE TABLE TW.MAPCOMPONENT(
    XPOS int,
    YPOS int,
    MAPASSET_ID BIGINT,
    PRIMARY KEY (XPOS , YPOS),
    FOREIGN KEY (MAPASSET_ID)  REFERENCES TW.MAPASSET(MAPASSET_ID)
);


CREATE TABLE TW.TRIBE(
	TRIBE_ID BIGINT,
	TRIBE_NR INTEGER,
	NAME varchar(255),
	TAG varchar(255),
	DESCRIPTION varchar(255),
	PRIMARY KEY (TRIBE_ID)
);

CREATE TABLE TW.PLAYER(
    PLAYER_ID BIGINT,
    PLAYER_NR INTEGER,
    EMAIL varchar(255),
    PASS varchar(255),
    NAME varchar(255),
    PROFILE_TEXT varchar(255),
    TRIBE_ID BIGINT,
    PRIMARY KEY (PLAYER_ID),
    FOREIGN KEY (TRIBE_ID)  REFERENCES TW.TRIBE(TRIBE_ID)
);

CREATE TABLE TW.VILLAGE(
	VILLAGE_ID BIGINT,
    VILLAGE_NR INTEGER,
    NAME varchar (255),
    XPOS INTEGER,
    YPOS INTEGER,
    POINTS INTEGER,
    CONTINENT INTEGER,
	
	CURRENT_WOOD INTEGER,
	CURRENT_CLAY INTEGER,
	CURRENT_IRON INTEGER,
	
	PLAYER_ID BIGINT,
	BONUS_ID BIGINT,
    PRIMARY KEY (VILLAGE_ID),
    FOREIGN KEY (PLAYER_ID)  REFERENCES TW.PLAYER(PLAYER_ID),
    FOREIGN KEY (BONUS_ID)  REFERENCES GENERAL.BONUS(BONUS_ID)
);

CREATE TABLE TW.VILLAGE_BUILDING(
	VILLAGE_ID BIGINT,
	BUILDING_ID BIGINT,
	LEVEL INTEGER,
	PRIMARY KEY (VILLAGE_ID, BUILDING_ID),
	FOREIGN KEY (VILLAGE_ID) REFERENCES TW.VILLAGE(VILLAGE_ID),
	FOREIGN KEY (BUILDING_ID) REFERENCES GENERAL.BUILDING(BUILDING_ID)
);



CREATE OR REPLACE VIEW TW.VILLAGE_POINTS_V AS
SELECT 
    v.village_id,
    SUM(bps.sum) AS POINTS
FROM
    TW.VILLAGE_BUILDING vb
LEFT JOIN GENERAL.BUILDING b ON vb.building_id = b.building_id
LEFT JOIN TW.VILLAGE v ON vb.village_id = v.village_id
LEFT JOIN GENERAL.BUILDING_POINT_SUM bps ON b.building_id = bps.building_id AND vb.level = bps.level
GROUP BY v.village_id
;

CREATE OR REPLACE VIEW TW.PLAYER_RANK_V AS
SELECT 
    RANK() OVER (ORDER BY i.points DESC, i.player_nr DESC) AS 'Rank',
    i.Name,
    i.tag AS 'Tribe',
    i.Points,
    i.Villages,
    i.ppv as 'Points per village'
FROM
    (SELECT 
        p.name,
        p.player_nr,
		t.tag,
		SUM(v.points) as 'Points',
		COUNT(v.village_id) as 'Villages',
		ROUND(AVG(v.points)) as 'PPV'
    FROM
        TW.PLAYER p
    LEFT JOIN TW.VILLAGE v ON v.player_id = p.player_id
    LEFT JOIN TW.TRIBE t ON p.tribe_id = t.tribe_id
    GROUP BY p.player_id) AS i
;
